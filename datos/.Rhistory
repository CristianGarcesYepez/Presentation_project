demo()
# Asignación de valores
x <- 10
y <- 5
# Operaciones con variables
suma <- x + y
producto <- x * y
# Mostrar resultados
print(suma)
print(producto)
# Crear un vector de números
numeros <- c(1, 2, 3, 4, 5)
# Acceder a elementos
numeros[1]  # Primer elemento
numeros[3]  # Tercer elemento
# Datos de ejemplo
x <- c(1, 2, 3, 4, 5)
y <- c(10, 20, 15, 30, 25)
# Gráfico de dispersión
plot(x, y, type="o", col="blue", main="Ejemplo de gráfico en R", xlab="Eje X", ylab="Eje Y")
# Datos de ejemplo
x <- c(1, 2, 3, 4, 5)
y <- c(10, 20, 15, 30, 25)
# Gráfico de dispersión
plot(x, y, type="1", col="blue", main="Ejemplo de gráfico en R", xlab="Eje X", ylab="Eje Y")
# Datos de ejemplo
x <- c(1, 2, 3, 4, 5)
y <- c(10, 20, 15, 30, 25)
# Gráfico de dispersión
plot(x, y, type="p", col="blue", main="Ejemplo de gráfico en R", xlab="Eje X", ylab="Eje Y")
# Datos de ejemplo
x <- c(1, 2, 3, 4, 5)
y <- c(10, 20, 15, 30, 25)
# Gráfico de dispersión
plot(x, y, type="o", col="blue", main="Ejemplo de gráfico en R", xlab="Eje X", ylab="Eje Y")
# Datos de ejemplo
x <- c(1, 2, 3, 4, 5)
y <- c(10, 20, 15, 30, 25)
# Gráfico de dispersión
plot(x, y, type="o", col="red", main="Ejemplo de gráfico en R", xlab="Años", ylab="Ventas")
# 1️⃣ Crear datos ficticios (ventas por categoría de productos)
categorias <- c("Laptops", "Tablets", "Smartphones", "Accesorios", "PCs")
ventas <- c(120, 85, 190, 70, 150)  # Ventas en unidades
# 2️⃣ Crear un gráfico de barras
barplot(ventas,
names.arg = categorias,  # Nombres en el eje X
col = c("blue", "green", "red", "purple", "orange"),  # Colores personalizados
main = "Ventas de Productos Tecnológicos",  # Título del gráfico
xlab = "Categorías",  # Etiqueta del eje X
ylab = "Unidades Vendidas",  # Etiqueta del eje Y
ylim = c(0, 200),  # Rango del eje Y
border = "black"  # Color del borde de las barras
)
# scripts/generar_datos.R
# Simula la extracción de datos (reemplazable con base de datos o Excel)
# Este script genera la estructura base que usará el script de presentación
trabajos <- data.frame(
Zona = c("Africa", "Asia", "Churute"),
Trabajo = c("Análisis de ventas", "Revisión de procesos", "Informe mensual"),
Tipo = c("Informe", "Auditoría", "Reporte"),
Fecha = as.Date(c("2025-06-01", "2025-06-03", "2025-06-05")),
Días = c(3, 2, 5),
Avance = c("80%", "50%", "100%"),
stringsAsFactors = FALSE
)
# Guarda los datos para ser usados por el script de presentación
saveRDS(trabajos, file = "datos_generado/datos_generados.rds")
View(trabajos)
# scripts/generar_datos.R
# Librerías necesarias
library(DBI)         # Conexión a bases de datos
library(odbc)        # Drivers ODBC para bases de datos
library(readxl)      # Lectura de archivos Excel
library(dplyr)       # Manipulación de datos
library(lubridate)   # Manejo de fechas
# ⚠️ Simulación de datos ficticios (puedes reemplazar esta sección con tu conexión real)
# Ejemplo: datos ficticios simulando la lectura desde Excel o BD
trabajos <- data.frame(
Zona = c("Africa", "Asia", "Churute", "Korea"),
Trabajo = c("Revisión de sensores", "Inspección de bombas", "Reparación estructural", "Calibración de equipos"),
Tipo = c("Mantenimiento", "Inspección", "Reparación", "Calibración"),
Fecha = as.Date(c("2025-05-10", "2025-05-12", "2025-05-14", "2025-05-16")),
Días = c(3, 2, 5, 1),
Avance = c("80%", "100%", "60%", "90%"),
stringsAsFactors = FALSE
)
# Aquí podrías usar:
# conn <- dbConnect(odbc::odbc(), "NombreDSN")
# trabajos <- dbGetQuery(conn, "SELECT * FROM tabla_trabajos")
# O para Excel:
# trabajos <- read_excel("data/trabajos.xlsx")
# Guardar los datos en archivo RDS para el script 2
saveRDS(trabajos, "scripts/datos_generados.rds")
# scripts/generar_datos.R
# Librerías necesarias
library(DBI)         # Conexión a bases de datos
library(odbc)        # Drivers ODBC para bases de datos
library(readxl)      # Lectura de archivos Excel
library(dplyr)       # Manipulación de datos
library(lubridate)   # Manejo de fechas
# ⚠️ Simulación de datos ficticios (puedes reemplazar esta sección con tu conexión real)
# Ejemplo: datos ficticios simulando la lectura desde Excel o BD
trabajos <- data.frame(
Zona = c("Africa", "Asia", "Churute", "Korea"),
Trabajo = c("Revisión de sensores", "Inspección de bombas", "Reparación estructural", "Calibración de equipos"),
Tipo = c("Mantenimiento", "Inspección", "Reparación", "Calibración"),
Fecha = as.Date(c("2025-05-10", "2025-05-12", "2025-05-14", "2025-05-16")),
Días = c(3, 2, 5, 1),
Avance = c("80%", "100%", "60%", "90%"),
stringsAsFactors = FALSE
)
# Aquí podrías usar:
# conn <- dbConnect(odbc::odbc(), "NombreDSN")
# trabajos <- dbGetQuery(conn, "SELECT * FROM tabla_trabajos")
# O para Excel:
# trabajos <- read_excel("data/trabajos.xlsx")
# Guardar los datos en archivo RDS para el script 2
saveRDS(trabajos, "datos/datos_generados.rds")
# scripts/generar_datos.R
# Librerías necesarias
library(DBI)         # Conexión a bases de datos
library(odbc)        # Drivers ODBC para bases de datos
library(readxl)      # Lectura de archivos Excel
library(dplyr)       # Manipulación de datos
library(lubridate)   # Manejo de fechas
# ⚠️ Simulación de datos ficticios (puedes reemplazar esta sección con tu conexión real)
# Ejemplo: datos ficticios simulando la lectura desde Excel o BD
trabajos <- data.frame(
Zona = c("Africa", "Asia", "Churute", "Korea"),
Trabajo = c("Revisión de sensores", "Inspección de bombas", "Reparación estructural", "Calibración de equipos"),
Tipo = c("Mantenimiento", "Inspección", "Reparación", "Calibración"),
Fecha = as.Date(c("2025-05-10", "2025-05-12", "2025-05-14", "2025-05-16")),
Días = c(3, 2, 5, 1),
Avance = c("80%", "100%", "60%", "90%"),
stringsAsFactors = FALSE
)
# Aquí podrías usar:
# conn <- dbConnect(odbc::odbc(), "NombreDSN")
# trabajos <- dbGetQuery(conn, "SELECT * FROM tabla_trabajos")
# O para Excel:
# trabajos <- read_excel("data/trabajos.xlsx")
# Crear carpeta si no existe
if (!dir.exists("datos")) dir.create("datos")
# Guardar los datos en archivo RDS para el script 2
saveRDS(trabajos, "datos/datos_generados.rds")
cat("✅ Datos generados y guardados como 'scripts/datos_generados.rds'\n")
# scripts/generar_datos.R
# Librerías necesarias
library(DBI)         # Conexión a bases de datos
library(odbc)        # Drivers ODBC para bases de datos
library(readxl)      # Lectura de archivos Excel
library(dplyr)       # Manipulación de datos
library(lubridate)   # Manejo de fechas
# ⚠️ Simulación de datos ficticios (puedes reemplazar esta sección con tu conexión real)
# Ejemplo: datos ficticios simulando la lectura desde Excel o BD
trabajos <- data.frame(
Zona = c("Africa", "Asia", "Churute", "Korea"),
Trabajo = c("Revisión de sensores", "Inspección de bombas", "Reparación estructural", "Calibración de equipos"),
Tipo = c("Mantenimiento", "Inspección", "Reparación", "Calibración"),
Fecha = as.Date(c("2025-05-10", "2025-05-12", "2025-05-14", "2025-05-16")),
Días = c(3, 2, 5, 1),
Avance = c("80%", "100%", "60%", "90%"),
stringsAsFactors = FALSE
)
# Aquí podrías usar:
# conn <- dbConnect(odbc::odbc(), "NombreDSN")
# trabajos <- dbGetQuery(conn, "SELECT * FROM tabla_trabajos")
# O para Excel:
# trabajos <- read_excel("data/trabajos.xlsx")
# Crear carpeta si no existe
#if (!dir.exists("datos")) dir.create("datos")
# Establecer directorio de trabajo con la sintaxis correcta
setwd("C:/Users/soporte/Desktop/Cristian G/IPSP/Presentation_project/datos")
# Guardar los datos en archivo RDS para el script 2
saveRDS(trabajos, "datos_generados.rds")
cat("✅ Datos generados y guardados como 'scripts/datos_generados.rds'\n")
install.packages(c("officer", "flextable"))
# scripts/generar_presentacion.R
library(officer)
library(flextable)
library(magrittr)
setwd("C:/Users/soporte/Desktop/Cristian G/IPSP/Presentation_project/datos")
# Cargar los datos generados
trabajos <- readRDS("datos_generados.rds")
# Crear presentación vacía
ppt <- read_pptx()
# Colores institucionales
color_azul <- "#102030"
color_blanco <- "#FFFFFF"
color_texto <- "#000000"
setwd("C:/Users/soporte/Desktop/Cristian G/IPSP/Presentation_project/imagenes")
# Ruta al logo institucional
ruta_logo <- "logoad.png"
# Iterar por cada fila (trabajo)
for (i in seq_len(nrow(trabajos))) {
fila <- trabajos[i, ]
zona <- fila$Zona
imagen_ruta <- paste0("imagenes/", zona, ".jpg")
# Crear tabla con estilos limpios
tabla <- flextable(data.frame(
Trabajo = fila$Trabajo,
Tipo = fila$Tipo,
Fecha = as.character(fila$Fecha),
Días = fila$Días,
`Porcentaje de Avance` = fila$Avance
)) %>%
theme_box() %>%
fontsize(size = 12) %>%
color(color = color_texto) %>%
bg(bg = "#FFFFFF", part = "all") %>%
align(align = "center", part = "all") %>%
set_table_properties(width = .9, layout = "autofit")
# Crear una diapositiva blanca
ppt <- add_slide(ppt, layout = "Blank", master = "Office Theme")
# Insertar un rectángulo de título con fondo azul y texto blanco
ppt <- ph_with(
ppt,
value = fpar(
ftext(zona, fp_text(color = color_blanco, font.size = 24, bold = TRUE)),
fp_p = fp_par(text.align = "center")
),
location = ph_location(left = 0, top = 0, width = 10, height = 1),
bg = color_azul
)
# Insertar imagen de zona (si existe)
if (file.exists(imagen_ruta)) {
ppt <- ph_with(
ppt,
external_img(imagen_ruta, width = 4.5, height = 3.5),
location = ph_location(left = 0.5, top = 1.5)
)
}
# Insertar tabla
ppt <- ph_with(
ppt,
tabla,
location = ph_location(left = 5.2, top = 1.5, width = 4.5, height = 2.5)
)
# Insertar logo institucional (si existe)
if (file.exists(ruta_logo)) {
ppt <- ph_with(
ppt,
external_img(ruta_logo, width = 1.2, height = 1.2),
location = ph_location(left = 8.5, top = 0.1)
)
}
}
setwd("C:/Users/soporte/Desktop/Cristian G/IPSP/Presentation_project/informe_generado")
# Guardar archivo final
print(ppt, target = "informe.pptx")
cat("✅ Presentación generada en 'generado/informe.pptx'\n")
install.packages("quarto")
# scripts/generar_datos.R
# Librerías necesarias
library(DBI)         # Conexión a bases de datos
library(odbc)        # Drivers ODBC para bases de datos
library(readxl)      # Lectura de archivos Excel
library(dplyr)       # Manipulación de datos
library(lubridate)   # Manejo de fechas
# ⚠️ Simulación de datos ficticios (puedes reemplazar esta sección con tu conexión real)
# Ejemplo: datos ficticios simulando la lectura desde Excel o BD
trabajos <- data.frame(
Zona = c("Africa", "Asia", "Churute", "Korea"),
Trabajo = c("Revisión de sensores", "Inspección de bombas", "Reparación estructural", "Calibración de equipos"),
Tipo = c("Mantenimiento", "Inspección", "Reparación", "Calibración"),
Fecha = as.Date(c("2025-05-10", "2025-05-12", "2025-05-14", "2025-05-16")),
Días = c(3, 2, 5, 1),
Avance = c("80%", "100%", "60%", "90%"),
stringsAsFactors = FALSE
)
# Aquí podrías usar:
# conn <- dbConnect(odbc::odbc(), "NombreDSN")
# trabajos <- dbGetQuery(conn, "SELECT * FROM tabla_trabajos")
# Crear carpeta si no existe
#if (!dir.exists("datos")) dir.create("datos")
# Establecer directorio de trabajo con la sintaxis correcta
setwd("C:/Users/soporte/Desktop/Cristian G/IPSP/Presentation_project/datos")
# Para Excel:
trabajos <- read_excel("trabajos.xlsx")
trabajos <- write_excel("trabajos.xlsx")
writexl::write_xlsx(trabajos, "trabajos.xlsx")
